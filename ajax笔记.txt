基本知识：
	1，可以通过form标签的method属性发送请求的类型
	2，如果是get请求会将提交的数据拼接到URL后面
	3，如果是post请求会将提交的数据放到请求头中
	4，get和post的异同
		1，都是将数据提交到远程服务器
		2，提交数据的存储位置不同， get是将数据提交到URL后面，post是将数据提交到请求头中。
		3，提交数据大小限制不同，get请求对数据大小有限制，post对数据大小无限制
	5,应用场景
		get请求用于提交非敏感数据和小数据
		post请求用于提交敏感和大数据
	post上传文件
		1，创建表单form元素
		2，在PHP文件中保存文件
			// 获取上传文件对应的字典
			$fileInfo = $_FILES["upFile"];
			// print_r($fileInfo);
			// 获取上传文件的名称
			$fileName = $fileInfo["name"];
			// 获取上传文件保存的临时路径
			$filePath = $fileInfo["tmp_name"];
			// 移动文件
			move_uploaded_file($filePath, "./".$fileName);
			move_uploaded_file()传入两个参数，第一个是要保存的文件，第二个是文件的新位置
	修改上传文件大小的配置
		默认情况下，服务器对上传文件大小是有限制的，可以通过修改php.ini文件来修改（D:\wamp\bin\apache\apache2.4.23\bin）
		file_uploads = On;	是否允许上传文件
		upload_max_filesize = 2048M; 	上传文件的最大限制
		post_max_size = 2048M; 		通过post提交的最大数据

ajax知识：
	1，什么是ajax
		ajax是在不重新加载真个页面的情况下，与服务器交换数据并更新部分网页的艺术
	2，get请求的步骤
		//1,创建一个异步对象
		var xmlhttp = new XMLHttpRequest();
		//2，设置请求方式和请求地址
		/* 
		   method：请求的类型；GET 或 POST
		   url：文件在服务器上的位置
		   async：true（异步）或 false（同步）
		*/
		xmlhttp.open("GET","ajax.php",true);
		//3，发送请求
		xmlhttp.send();
		//4，监听状态的变化
		xmlhttp.onreadystatechange = function(ev2){
			if (xmlhttp.readyState === 4) {
				//判断请求是否成功
				if (xmlhttp.status >=200 && xmlhttp.status <=300 || xmlhttp.status === 304) {
					//5，处理返回的结果
					console.log("接受到请求");
				} else{
					console.log("请求不成功");
				}
				
			}
	3,ajax在ie浏览器中的问题
		1,IE5 和 IE6 使用 ActiveXObject
			var xmlhttp;
			if (window.XMLHttpRequest)
			  {// code for IE7+, Firefox, Chrome, Opera, Safari
			  xmlhttp=new XMLHttpRequest();
			  }
			else
			  {// code for IE6, IE5
			  xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");
			  }
		2,IE浏览器如果通过ajax发送get请求，那么IE浏览器认为同一个URL只有一个结果
			给URL地址添加随机的参数
			xhr.open("GET","ajax.php?t="+(new Date().getTime()),true);

ajax封装：
 	代码如下：
		function objToString(obj){
			var res = [];
			obj.t = new Date().getTime();
			for(var key in obj){
				res.push(encodeURIComponent(key)+"="+encodeURIComponent(obj[key]));
		
			}
			return res.join("&");
		}
		function myAjax(type,url,obj,timeout,success,error){
			//将对象装换为字符串
			var str = objToString(obj);
			//创建异步对象
			var xhr,timer;
			if (window.XMLHttpRequest){// code for IE7+, Firefox, Chrome, Opera, Safari
			  	xhr = new XMLHttpRequest();
			 }
			else {// code for IE6, IE5
			  	xhr = new ActiveXObject("Microsoft.XMLHTTP");
			 }
			 //设置请求方式和请求地址
			 if (type === "GET") {
			 	xhr.open(type,url+"?"+str,true);
			 	//发送请求
			 	xhr.send();
			 } else{
			 	xhr.open("POST",url+"?"+str,true);
			 	xhr.setRequestHeader("Content-type","application/x-www-form-urlencoded");
			 	//发送请求
			 	xhr.send(str);
			 }
			 
			 //监听状态的变化
			 xhr.onreadystatechange = function(ev2){
			 	if (xhr.readyState === 4) {
			 		clearInterval(timer)
			 		if (xhr.status >= 200 && xhr.status<=300 ||xhr.status ===304) {
			 			//处理返回的结果
			 			success(xhr);
			 		}
			 		else{
			 			error(xhr);
			 		}
			 	}
			 }
			 //判断外界是否传入超时时间
			 if(timeout){

			 	timer = setInterval(function(){
			 		console.log("中断请求");
			 		xhr.abort();
			 		clearInterval(timer);
			 	},timeout)
			 }
		}
	调用：
		myAjax("POST","ajax.php",{
					"userName":"lll",
					"userPwd":"133"
				},3000,function(xhr){
					alert(xhr.responseText);
				},function(xhr){
					alert("error");
				});
		
				
ajax-xml
	xml的写法
		<?xml version="1.0" encoding="UTF-8"?>
		<products>
		<nz>
			<title>甜美女装</title>
			<des>人见人爱，花见花开，甜美系列</des>
			<image>images/1.jpg</image>
		</nz>
		</products>
php
	在PHP中输出显示xml内容
		header("content-type:text/xml; charset=utf-8");
		echo file_get_contents("info.xml");
ajax-json
	将字符串转换为json
		var json = JSON.stringify(str);
	将json转换为字符串
		var str = JSON.parse(json);
cookie:
	cookie:会话跟踪技术	客户端
	session:会话跟踪技术 服务器
	cookie作用：
		将网页的数据保存到浏览器中
	cookie周期：
		默认情况下生命周期是一次会话（浏览器关闭）
		如果通过expires = 设置了过期时间，并且过期时间没有过期，下次打开浏览器还是会存在的。
	cookie注意点：
		cookie默认不会保存任何数据
		cookie不能一次性设置多条数据，想要保存多条数据，只能一条一条设置
		cookie有大小和个数限
			个数限制 一般在20——50个，不同浏览器不同
			大小限制：4kb左右
	cookie作用范围
		同一个浏览器的同一个路径下访问
		如果在同一浏览器中，默认同路径下一级可以访问到
		如果想要上一级可以访问到
			document.cookie = "name=ll;path=/";//将cookie保存到根目录
		如果想要在不同域名下访问
			例如：在www.lll.com中保存了一个cookie，如果想要在edu.lll.com中访问到
				document.cookie = "name=lll;path=/;domain=lll.com;"
	使用：
		document.cookie = "key=value;";
	设置生命周期：
		//设置生命周期为一天
		var date = new Date();
		date.setDate(date.getDate()+1);
		document.cookie = "key=value;expires="+date.toGMTString()+";";
	cookie封装
		//添加cookie
			function addCookie(key,value,time,path,domain){
				//处理默认的保存路径
				var index = window.location.pathname.lastIndexOf("/");
				var currentPath = window.location.pathname.slice(0,index);
				//若传入path,则将path属性设为传入的path，否则设为默认
				path = path || currentPath;
				//处理保存的domain
				domain = domain || document.domain;
				//处理过期时间
				//设置默认过期时间
				if (!time) {
					document.cookie = key+"="+value+";path="+path+";domain="+domain+";";
				}
				//设置传入的时间
				else {
					var date = new Date();
					date.setDate(date.getDate()+time);
					document.cookie = key+"="+value+";expires="+date.toGMTString()+";path="+path+";domain="+domain+";";
				}

			}
		获取cookie
			function getCookie(key){
				//以;分隔为数组
				var res = document.cookie.split(";");
				// console.log(res);
				//遍历数组
				for(var i = 0;i<res.length;i++){
					//将每一组cookie以数组的形式存储
					var temp = res[i].split("=");
					//判断是否为要获取的key
					if(temp[0].trim() === key){
						//返回对应的value值
						return temp[1];
					}
				}
			}
		删除cookie
			function deleteCookie(key){
				addCookie(key,getCookie(key),-1);
			}
			deleteCookie("love");
hash知识
	